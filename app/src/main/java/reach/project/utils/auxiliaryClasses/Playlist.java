package reach.project.utils.auxiliaryClasses;

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: /Users/ashish/Documents/proto/musiclist.proto
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class Playlist extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<Long> DEFAULT_REACHSONGS = Collections.emptyList();
  public static final String DEFAULT_PLAYLISTNAME = "hello_world";
  public static final String DEFAULT_DATEMODIFIED = "hello_world";
  public static final Boolean DEFAULT_VISIBILITY = true;

  @ProtoField(tag = 1, type = INT64, label = REPEATED)
  public final List<Long> reachSongs;

  @ProtoField(tag = 2, type = STRING)
  public final String playlistName;

  @ProtoField(tag = 3, type = STRING)
  public final String dateModified;

  @ProtoField(tag = 4, type = BOOL)
  public final Boolean visibility;

  @ProtoField(tag = 5)
  public final PlaylistMBID playlistMBID;

  public Playlist(List<Long> reachSongs, String playlistName, String dateModified, Boolean visibility, PlaylistMBID playlistMBID) {
    this.reachSongs = immutableCopyOf(reachSongs);
    this.playlistName = playlistName;
    this.dateModified = dateModified;
    this.visibility = visibility;
    this.playlistMBID = playlistMBID;
  }

  private Playlist(Builder builder) {
    this(builder.reachSongs, builder.playlistName, builder.dateModified, builder.visibility, builder.playlistMBID);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Playlist)) return false;
    Playlist o = (Playlist) other;
    return equals(reachSongs, o.reachSongs)
        && equals(playlistName, o.playlistName)
        && equals(dateModified, o.dateModified)
        && equals(visibility, o.visibility)
        && equals(playlistMBID, o.playlistMBID);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = reachSongs != null ? reachSongs.hashCode() : 1;
      result = result * 37 + (playlistName != null ? playlistName.hashCode() : 0);
      result = result * 37 + (dateModified != null ? dateModified.hashCode() : 0);
      result = result * 37 + (visibility != null ? visibility.hashCode() : 0);
      result = result * 37 + (playlistMBID != null ? playlistMBID.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Playlist> {

    public List<Long> reachSongs;
    public String playlistName;
    public String dateModified;
    public Boolean visibility;
    public PlaylistMBID playlistMBID;

    public Builder() {
    }

    public Builder(Playlist message) {
      super(message);
      if (message == null) return;
      this.reachSongs = copyOf(message.reachSongs);
      this.playlistName = message.playlistName;
      this.dateModified = message.dateModified;
      this.visibility = message.visibility;
      this.playlistMBID = message.playlistMBID;
    }

    public Builder reachSongs(List<Long> reachSongs) {
      this.reachSongs = checkForNulls(reachSongs);
      return this;
    }

    public Builder playlistName(String playlistName) {
      this.playlistName = playlistName;
      return this;
    }

    public Builder dateModified(String dateModified) {
      this.dateModified = dateModified;
      return this;
    }

    public Builder visibility(Boolean visibility) {
      this.visibility = visibility;
      return this;
    }

    public Builder playlistMBID(PlaylistMBID playlistMBID) {
      this.playlistMBID = playlistMBID;
      return this;
    }

    @Override
    public Playlist build() {
      return new Playlist(this);
    }
  }
}
