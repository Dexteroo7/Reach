package reach.project.utils.auxiliaryClasses;

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: /Users/ashish/Documents/proto/musiclist.proto
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class PlaylistMBID extends Message {
  private static final long serialVersionUID = 0L;

  public static final List<String> DEFAULT_ARTISTMBID = Collections.emptyList();
  public static final List<String> DEFAULT_RELEASEGROUPMBID = Collections.emptyList();

  @ProtoField(tag = 1, type = STRING, label = REPEATED)
  public final List<String> artistMBID;

  @ProtoField(tag = 2, type = STRING, label = REPEATED)
  public final List<String> releaseGroupMBID;

  public PlaylistMBID(List<String> artistMBID, List<String> releaseGroupMBID) {
    this.artistMBID = immutableCopyOf(artistMBID);
    this.releaseGroupMBID = immutableCopyOf(releaseGroupMBID);
  }

  private PlaylistMBID(Builder builder) {
    this(builder.artistMBID, builder.releaseGroupMBID);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PlaylistMBID)) return false;
    PlaylistMBID o = (PlaylistMBID) other;
    return equals(artistMBID, o.artistMBID)
        && equals(releaseGroupMBID, o.releaseGroupMBID);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = artistMBID != null ? artistMBID.hashCode() : 1;
      result = result * 37 + (releaseGroupMBID != null ? releaseGroupMBID.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<PlaylistMBID> {

    public List<String> artistMBID;
    public List<String> releaseGroupMBID;

    public Builder() {
    }

    public Builder(PlaylistMBID message) {
      super(message);
      if (message == null) return;
      this.artistMBID = copyOf(message.artistMBID);
      this.releaseGroupMBID = copyOf(message.releaseGroupMBID);
    }

    public Builder artistMBID(List<String> artistMBID) {
      this.artistMBID = checkForNulls(artistMBID);
      return this;
    }

    public Builder releaseGroupMBID(List<String> releaseGroupMBID) {
      this.releaseGroupMBID = checkForNulls(releaseGroupMBID);
      return this;
    }

    @Override
    public PlaylistMBID build() {
      return new PlaylistMBID(this);
    }
  }
}
