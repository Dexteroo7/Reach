package reach.project.push;// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/pushcontainer.proto
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class TransferSong extends Message {
  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_SONGID = 0L;
  public static final Long DEFAULT_SIZE = 0L;
  public static final Long DEFAULT_DURATION = 0L;
  public static final String DEFAULT_DISPLAYNAME = "hello_world";
  public static final String DEFAULT_ACTUALNAME = "hello_world";
  public static final String DEFAULT_ARTISTNAME = "hello_world";
  public static final String DEFAULT_ALBUMNAME = "hello_world";
  public static final String DEFAULT_GENRE = "hello_world";

  @ProtoField(tag = 1, type = INT64)
  public final Long songId;

  @ProtoField(tag = 2, type = INT64)
  public final Long size;

  @ProtoField(tag = 3, type = INT64)
  public final Long duration;

  @ProtoField(tag = 4, type = STRING)
  public final String displayName;

  @ProtoField(tag = 5, type = STRING)
  public final String actualName;

  @ProtoField(tag = 6, type = STRING)
  public final String artistName;

  @ProtoField(tag = 7, type = STRING)
  public final String albumName;

  @ProtoField(tag = 8, type = STRING)
  public final String genre;

  public TransferSong(Long songId, Long size, Long duration, String displayName, String actualName, String artistName, String albumName, String genre) {
    this.songId = songId;
    this.size = size;
    this.duration = duration;
    this.displayName = displayName;
    this.actualName = actualName;
    this.artistName = artistName;
    this.albumName = albumName;
    this.genre = genre;
  }

  private TransferSong(Builder builder) {
    this(builder.songId, builder.size, builder.duration, builder.displayName, builder.actualName, builder.artistName, builder.albumName, builder.genre);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TransferSong)) return false;
    TransferSong o = (TransferSong) other;
    return equals(songId, o.songId)
        && equals(size, o.size)
        && equals(duration, o.duration)
        && equals(displayName, o.displayName)
        && equals(actualName, o.actualName)
        && equals(artistName, o.artistName)
        && equals(albumName, o.albumName)
        && equals(genre, o.genre);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = songId != null ? songId.hashCode() : 0;
      result = result * 37 + (size != null ? size.hashCode() : 0);
      result = result * 37 + (duration != null ? duration.hashCode() : 0);
      result = result * 37 + (displayName != null ? displayName.hashCode() : 0);
      result = result * 37 + (actualName != null ? actualName.hashCode() : 0);
      result = result * 37 + (artistName != null ? artistName.hashCode() : 0);
      result = result * 37 + (albumName != null ? albumName.hashCode() : 0);
      result = result * 37 + (genre != null ? genre.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TransferSong> {

    public Long songId;
    public Long size;
    public Long duration;
    public String displayName;
    public String actualName;
    public String artistName;
    public String albumName;
    public String genre;

    public Builder() {
    }

    public Builder(TransferSong message) {
      super(message);
      if (message == null) return;
      this.songId = message.songId;
      this.size = message.size;
      this.duration = message.duration;
      this.displayName = message.displayName;
      this.actualName = message.actualName;
      this.artistName = message.artistName;
      this.albumName = message.albumName;
      this.genre = message.genre;
    }

    public Builder songId(Long songId) {
      this.songId = songId;
      return this;
    }

    public Builder size(Long size) {
      this.size = size;
      return this;
    }

    public Builder duration(Long duration) {
      this.duration = duration;
      return this;
    }

    public Builder displayName(String displayName) {
      this.displayName = displayName;
      return this;
    }

    public Builder actualName(String actualName) {
      this.actualName = actualName;
      return this;
    }

    public Builder artistName(String artistName) {
      this.artistName = artistName;
      return this;
    }

    public Builder albumName(String albumName) {
      this.albumName = albumName;
      return this;
    }

    public Builder genre(String genre) {
      this.genre = genre;
      return this;
    }

    @Override
    public TransferSong build() {
      return new TransferSong(this);
    }
  }
}
