package reach.project.coreViews.yourProfile.apps;// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: proto/smartapp.proto

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import java.util.Collections;
import java.util.List;

import reach.project.apps.App;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

final class SmartApps extends Message {

    private static final long serialVersionUID = 0L;

    public static final String DEFAULT_TITLE = "hello_world";
    public static final List<App> DEFAULT_SONGLIST = Collections.emptyList();

    @ProtoField(tag = 1, type = STRING)
    public final String title;

    @ProtoField(tag = 2, label = REPEATED, messageType = App.class)
    public final List<App> appList;

    public SmartApps(String title, List<App> appList) {
        this.title = title;
        this.appList = immutableCopyOf(appList);
    }

    private SmartApps(Builder builder) {
        this(builder.title, builder.appList);
        setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {

        if (other == this) return true;
        if (!(other instanceof SmartApps)) return false;
        SmartApps o = (SmartApps) other;
        return equals(title, o.title)
                && equals(appList, o.appList);
    }

    @Override
    public int hashCode() {

        int result = hashCode;
        if (result == 0) {
            result = title != null ? title.hashCode() : 0;
            result = result * 37 + (appList != null ? appList.hashCode() : 1);
            hashCode = result;
        }
        return result;
    }

    public static final class Builder extends Message.Builder<SmartApps> {

        public String title;
        public List<App> appList;

        public Builder() {
        }

        public Builder(SmartApps message) {
            super(message);
            if (message == null) return;
            this.title = message.title;
            this.appList = copyOf(message.appList);
        }

        public Builder title(String title) {
            this.title = title;
            return this;
        }

        public Builder appList(List<App> appList) {
            this.appList = checkForNulls(appList);
            return this;
        }

        @Override
        public SmartApps build() {
            return new SmartApps(this);
        }
    }
}
